version: '3.4'
services:
  api:
    image: docker.strobes.co/strobes-api:v1.4
      args:
            - AWS_ACCESS_KEY=$AWS_ACCESS_KEY_ID
            - AWS_SECRET_KEY=$AWS_SECRET_ACCESS_KEY
            - AWS_REGION=ap-south-1
            - CODEARTIFACT_REPO=$AWS_CODE_REPOSITORY
            - CODEARTIFACT_DOMAIN=$AWS_DOMAIN
            - CODEARTIFACT_DOMAIN_OWNER=$AWS_ACCOUNT_ID
    depends_on:
      - rabbitmq
      - postgres
    command:  sh start_api.sh
    expose:
      - 8000
    volumes:
      - media_data:/usr/src/app/media/
      - triangulum_artifacts:/artifacts/
    env_file:
      - ./api.env
    environment:
      - CONTAINER=web
    restart: always

  celery:
    image: docker.strobes.co/strobes-api:v1.4
      args:
            - AWS_ACCESS_KEY=$AWS_ACCESS_KEY_ID
            - AWS_SECRET_KEY=$AWS_SECRET_ACCESS_KEY
            - AWS_REGION=ap-south-1
            - CODEARTIFACT_REPO=$AWS_CODE_REPOSITORY
            - CODEARTIFACT_DOMAIN=$AWS_DOMAIN
            - CODEARTIFACT_DOMAIN_OWNER=$AWS_ACCOUNT_ID
    command: sh start_celery.sh
    expose:
      - 5555
    depends_on:
      - postgres
      - rabbitmq
    volumes:
      - media_data:/usr/src/app/media/
      - triangulum_artifacts:/artifacts/
    env_file:
      - ./api.env
    environment:
      - CONTAINER=celery
    restart: always

  frontend:
    image: docker.strobes.co/strobes-fe:v1.4
    command: bash -c 'serve -s build -l 3000'
    expose:
      - 3000
    restart: always

  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    ports:
      - 80:80
    depends_on:
      - api
      - frontend

  postgres:
    image:  postgres:11.10-alpine
    expose:
      - 5432
    env_file:
      - ./api.env
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    restart: always

  rabbitmq:
    image: rabbitmq:3.8.3-alpine
    labels:
      NAME: rabbitmq
    volumes:
      - ./rabbitmq_config/:/etc/rabbitmq/
      - rabbitmq_data:/var/lib/rabbitmq
    expose:
      - 5672
    restart: always

  elasticsearch:
    image: elasticsearch:7.7.0
    ports:
      - 9200:9200
    volumes:
      - esdata:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
    restart: always

  fluentbit:
    image: fluent/fluent-bit:1.5
    volumes:
      - ./fluent-bit/conf:/fluent-bit/etc
    expose:
      - 24224
    restart: always

  rabbitmq_tri:
    image: rabbitmq:3.8.3-alpine
    labels:
      NAME: rabbitmq_tri
    volumes:
      - ./rabbitmq_config/:/etc/rabbitmq/
      - rabbitmq_tri_data:/var/lib/rabbitmq
    expose:
      - 5672
    restart: always

  triangulum:
    image: docker.strobes.co/triangulum:v1.2.1
    hostname: "triangulum"
    expose:
      - 50051
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - triangulum_output:/output/
      - triangulum_artifacts:/artifacts/
    depends_on:
      - rabbitmq
    env_file:
      - ./triangulum.env
    restart: always

  # watchtower:
  #   image: containrrr/watchtower
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /home/ubuntu/.docker/config.json:/config.json
  #   command: --interval 30
  #   environment:
  #     - WATCHTOWER_CLEANUP=true


volumes:
  postgresql_data:
    driver: local
  rabbitmq_data:
    driver: local
  esdata:
    driver: local
  rabbitmq_tri_data:
    driver: local
  triangulum_output:
    name: triangulum_output
    driver: local
  media_data:
    driver: local
  triangulum_artifacts:
    name: triangulum_output
    driver: local
